digraph "cluster/Users/vishweshdkumar/Desktop/gsoc/finalwork/finalrepo/djangotrials/demo_files/demo2.py" {
	graph [bgcolor=transparent]
	node [style=filled]
	edge [color=white]
	subgraph clusterhasPath {
		graph [bgcolor=transparent]
		node [style=filled]
		edge [color=white]
		13 [label="n = len(self.matrix)
m = len(self.matrix[0])
" fillcolor=lightblue shape=rect]
		"13_calls" [label="len
len" shape=box3d]
		13 -> "13_calls" [label=calls style=dashed]
		35 [label="if i >= n or i < 0 or j >= m or j < 0:
" fillcolor=lightblue4 shape=diamond]
		14 [label="print(f'i:{i},j:{j} out of bounds')
return False
" color=red fillcolor=lightblue shape=rect id=curr_block penwidth=3]
		"14_calls" [label=print shape=box3d]
		14 -> "14_calls" [label=calls style=dashed]
		35 -> 14 [label="i >= n or i < 0 or j >= m or j < 0" color=red id=curr_link]
		15 [label="if self.matrix[i][j] == 0:
" fillcolor=lightblue4 shape=diamond]
		17 [label="print(f'i:{i},j:{j} blocked')
self.dp[i][j] = 3
return False
" fillcolor=lightblue shape=rect]
		"17_calls" [label=print shape=box3d]
		17 -> "17_calls" [label=calls style=dashed]
		15 -> 17 [label="self.matrix[i][j] == 0" color=black]
		18 [label="if self.dp[i][j] == 1:
" fillcolor=lightblue4 shape=diamond]
		20 [label="print(f'i:{i},j:{j} in current visit cycle')
return False
" fillcolor=lightblue shape=rect]
		"20_calls" [label=print shape=box3d]
		20 -> "20_calls" [label=calls style=dashed]
		18 -> 20 [label="self.dp[i][j] == 1" color=black]
		21 [label="if self.dp[i][j] == 3:
" fillcolor=lightblue4 shape=diamond]
		24 [label="if self.dp[i][j] == 4:
" fillcolor=lightblue4 shape=diamond]
		26 [label="print(f'i:{i},j:{j} path exists , already recorded')
return True
" fillcolor=lightblue shape=rect]
		"26_calls" [label=print shape=box3d]
		26 -> "26_calls" [label=calls style=dashed]
		24 -> 26 [label="self.dp[i][j] == 4" color=black]
		27 [label="ans = False
self.dp[i][j] = 1
right = self.hasPath(i + 1, j)
left = self.hasPath(i - 1, j)
up = self.hasPath(i, j + 1)
down = self.hasPath(i, j - 1)
ans = right or left or down or up
self.dp[i][j] = 4 if ans else 3
return ans
" fillcolor=lightblue shape=rect]
		"27_calls" [label="self.hasPath
self.hasPath
self.hasPath
self.hasPath" shape=box3d]
		27 -> "27_calls" [label=calls style=dashed]
		24 -> 27 [label="(self.dp[i][j] != 4)" color=black]
		21 -> 24 [label="(self.dp[i][j] != 3)" color=black]
		18 -> 21 [label="(self.dp[i][j] != 1)" color=black]
		15 -> 18 [label="(self.matrix[i][j] != 0)" color=black]
		35 -> 15 [label="(not (i >= n or i < 0 or j >= m or j < 0))" color=black]
		13 -> 35 [label="" color=black]
	}
}
